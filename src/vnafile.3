.\"
.\" Vector Network Analyzer Library
.\" Copyright Â© 2020, 2021 D Scott Guthridge <scott_guthridge@rompromity.net>
.\"
.\" This program is free software: you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published
.\" by the Free Software Foundation, either version 3 of the License, or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\" General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program.  If not, see <http://www.gnu.org/licenses/>.
.\"
.TH VNAFILE 3 "NOV 2017" GNU
.nh
.SH NAME
vnafile_alloc, vnafile_check, vnafile_fload, vnafile_free, vnafile_fsave, vnafile_get_dprecision, vnafile_get_file_type, vnafile_get_format, vnafile_get_fprecision, vnafile_load, vnafile_save, vnafile_set_dprecision, vnafile_set_file_type, vnafile_set_format, vnafile_set_fprecision \- Load and Save Network Parameter Data
.\"
.SH SYNOPSIS
.B #include <vnafile.h>
.PP
.BI "vnadata_t *vnafile_alloc(vnafile_error_fn_t *" error_fn ,
.if n \{\
.in +4
.\}
.BI "void *" error_arg );
.if n \{\
.in -4
.\}
.PP
.BI "vnafile_type_t vnafile_get_file_type(const vnafile_t *" vfp );
.PP
.BI "int vnafile_set_file_type(vnafile_t *" vfp ", vnafile_type_t " type );
.PP
.BI "const char *vnafile_get_format(const vnafile_t *" vfp );
.PP
.BI "int vnafile_set_format(vnafile_t *" vfp ", const char *" format );
.PP
.BI "int vnafile_get_fprecision(const vnafile_t *" vfp );
.PP
.BI "int vnafile_set_fprecision(const vnafile_t *" vfp ", int " fprecision );
.PP
.BI "int vnafile_get_dprecision(const vnafile_t *" vfp );
.PP
.BI "int vnafile_set_dprecision(const vnafile_t *" vfp ", int " dprecision );
.PP
.BI "vnafile_t *vnafile_load(const char *" filename ", vnafile_type_t " type ,
.in +4n
.BI "vnafile_error_fn_t *" error_fn ", void " error_arg ", vnadata_t *" vdp );
.in -4n
.PP
.BI "vnafile_t *vnafile_fload(FILE *" fp ", const char *" filename ,
.if n .in +4n
.BI "vnafile_type_t " type ,
.if !n .in +4n
.BI "vnafile_error_fn_t *" error_fn ,
.if n .br
.BI "void " error_arg ", vnadata_t *" vdp );
.in -4n
.PP
.BI "int vnafile_check(vnafile_t *" vfp ", const char *" filename ,
.if n \{\
.in +4
.\}
.BI "const vnadata_t *" vdp );
.if n \{\
.in -4
.\}
.PP
.BI "int vnafile_save(vnafile_t *" vfp ", const char *" filename ,
.if n \{\
.in +4
.\}
.BI "const vnadata_t *" vdp );
.if n \{\
.in -4
.\}
.PP
.BI "int vnafile_fsave(vnafile_t *" vfp ", FILE *" fp ,
.BI "const char *" filename ,
.if n \{\
.in +4
.\}
.BI "const vnadata_t *" vdp );
.if n \{\
.in -4
.\}
.PP
.BI "void vnafile_free(vnafile_t *" vfp );
.PP
Link with \fI-lvna\fP \fI-lm\fP.
.\"
.SH DESCRIPTION
These functions load and save vector network analyzer (VNA) parameter
data in Touchstone and native file formats.
.PP
\fBvnafile_alloc\fP() returns a pointer to a \fBvnafile_t\fP structure
used by the other functions.
The optional \fIerror_fn\fP is a pointer to a function the library
calls with a single line message (without newline) to report errors.
\fIerror_arg\fP is arbitrary user data passed through to the error
function.  Both can be \s-2NULL\s+2.  See \fBvnaerr\fP(3).
Whether an \fIerror_fn\fP is provided or not, the library functions that
can fail set \fBerrno\fP and return -1 or \s-2NULL\s+2 on failure.
.PP
The \fBvnafile_get_file_type\fP() and \fBvnafile_set_file_type\fP()
functions get and set the current file type described by the following
enumeration:
.sp
.in +4n
.nf
.ft CW
typedef enum vnafile_type {
    VNAFILE_AUTO,
    VNAFILE_NATIVE,
    VNAFILE_TOUCHSTONE1,
    VNAFILE_TOUCHSTONE2
} vnafile_type_t;
.ft R
.fi
.in -4n
.sp
The default is \s-2VNAFILE_AUTO\s+2 which causes the load and save
functions to try to automatically intuit the file type based on the
filename extension.
If the file ends with ".s<digit>p", the library assumes Touchstone 1
format; if it ends in ".ts", the library assumes Touchstone 2 format;
if it ends in ".npd" (network parameter data), or anything else,
the library assumes native format.
When loading Touchstone files, the parser internally uses the presence
of the [Version] keyword to determine the version \- either Touchstone
file extension works.
.PP
The \fBvnafile_get_format\fP() and \fBvnafile_set_format\fP() functions
get and set the way VNA parameter data is represented in the file.
The \fIformat\fP parameter is a comma-separated case-insensitive list
of the following specifiers:
.sp
.in +4n
.TS
l l.
S[ri|ma|dB]	scattering parameters
T[ri|ma|dB]	scattering-transfer parameters
Z[ri|ma]	impedance parameters
Y[ri|ma]	admittance parameters
H[ri|ma]	hybrid parameters
G[ri|ma]	inverse-hybrid parameters
A[ri|ma]	ABCD parameters
B[ri|ma]	inverse ABCD parameters
Zin[ri|ma]	impedance looking into each port
PRC	Zin as parallel RC
PRL	Zin as parallel RL
SRC	Zin as series RC
SRL	Zin as series RL
IL	insertion loss
RL	return loss
VSWR	voltage standing wave ratio
.TE
.in -4n
.sp
with the following optional coordinate system modifiers:
.in +4n
.TS
l l.
ri	real, imaginary
ma	magnitude, angle
dB	decibels, angle
.TE
.in -4n
.sp
In the Touchstone file formats, only one specifier can be given and it
must be restricted to one of the s, z, y, h or g variants.
If \fBvnafile_set_format\fP() isn't called, the default format takes
the parameter type from the \fBvnadata_t\fP structure with coordinates
\(lqri\(rq.
.\"
.PP
The \fBvnafile_get_fprecision\fP(), \fBvnafile_set_fprecision\fP(),
\fBvnafile_get_dprecision\fP(), and \fBvnafile_set_dprecision\fP() functions
get and set the numeric precision in decimal digits for frequency and data
values, respectively, when saving to a file.
If not set, \fIfprecision\fP defaults to 7 digits and \fIdprecision\fP
defaults to 6 digits.
.PP
The \fBvnafile_load\fP() function allocates a \fBvnafile_t\fP structure,
loads VNA parameter data from \fIfilename\fP, places the resulting
parameter data into the \fBvnadata_t\fP structure pointed to by \fIvdp\fP
(see \fBvnadata\fP(3)), and stores metadata about the loaded file such
as the file type into the \fBvnafile_t\fP structure.
.PP
The \fBvnafile_loadf\fP() function does the same, but uses the
caller-supplied open file pointer \fIfp\fP.
The \fIfilename\fP parameter to \fBvnafile_loadf\fP() is used only for
error messages and may be given as "-" or other string that doesn't
really refer to a file.
.PP
The \fBvnafile_check\fP() tests if the given combination of options and
parameter data are valid for \fBvnafile_save\fP().
That is, it performs a dry run of save to catch errors before anything
is actually written.
Some examples of things it checks are: that the format string is compatible
with Touchstone formats, that a parameter matrix with dimensions other
than 2x2 isn't being converted to one of the two-port formats
(t, g, h, a or b), and that multiple system impedances aren't given in
Touchstone 1 format.
.PP
The \fBvnafile_save\fP() function saves the VNA parameter data given in
\fIvdp\fP to \fIfilename\fP.
The \fBvnafile_savef\fP() function does the same, except that it uses
the caller-supplied open file pointer \fIfp\fP.
In the later case, \fIvnafile\fP is used for error messages only \-
it doesn't have to refer to an actual file.
.SH "RETURN VALUE"
The \fBvnafile_alloc\fP(), \fBvnafile_load\fP() and \fBvnafile_fload\fP()
function return a pointer to a \fBvnadata_t\fP structure used by the
other functions.
The various get functions return the requested data; they don't return
errors.
The integer-valued functions \fBvnafile_set_file_type\fP(),
\fBvnafile_set_format\fP(), \fBvnafile_set_fprecision\fP(),
\fBvnafile_set_dprecision\fP(), \fBvnfile_check\fP(), \fBvnafile_save\fP()
and \fBvnafile_savef\fP() return zero on success or set \fBerrno\fP and
return -1 on error.
.SH EXAMPLES
.nf
.ft CW
/*
 * Network parameter converter: converts between network parameter
 * types and between Touchstone 1, Touchstone 2 and native file format.
 * The file type is based on filename extension using ".s1p", ".s2p",
 * ".s3p", etc.  for Touchstone 1, ".ts" for Touchstone 2, and ".npd"
 * or other for native format.
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <vnafile.h>

static char *progname;

/*
 * usage: usage format
 */
static const char usage[] =
    "%s [-f format] input-file output-file\\n"
    "where format is a comma-separated list of:\\n"
    "  s[ri|ma|dB]  scattering parameters\\n"
    "  t[ri|ma|dB]  scattering-transfer parameters\\n"
    "  z[ri|ma]     impedance parameters\\n"
    "  y[ri|ma]     admittance parameters\\n"
    "  h[ri|ma]     hybrid parameters\\n"
    "  g[ri|ma]     inverse-hybrid parameters\\n"
    "  a[ri|ma]     ABCD parameters\\n"
    "  b[ri|ma]     inverse ABCD parameters\\n"
    "  Zin[ri|ma]   input impedances\\n"
    "  PRC          Zin as parallel RC\\n"
    "  PRL          Zin as parallel RL\\n"
    "  SRC          Zin as series RC\\n"
    "  SRL          Zin as series RL\\n"
    "  IL           insertion loss\\n"
    "  RL           return loss\\n"
    "  VSWR         voltage standing wave ratio\\n"
    "\\n"
    "Coordinates\\n"
    "  ri  real, imaginary\\n"
    "  ma  magnitude, angle\\n"
    "  dB  decibels, angle\\n"
    "\\n"
    "Specifiers are case-insensitive.\\n";

/*
 * error_fn: error printing function for the library
 *   @category: category of error (ignored here)
 *   @message: single line error message without a newline
 *   @error_arg: passed through to the error function (unused here)
 */
static void error_fn(vnaerr_category_t category, const char *message,
        void *error_arg)
{
    (void)fprintf(stderr, "%s: %s\\n", progname, message);
}

/*
 * main
 */
int main(int argc, char **argv)
{
    vnafile_t *vfp;
    vnadata_t *vdp;
    const char *f_opt = NULL;

    if ((char *)NULL == (progname = strrchr(argv[0], '/'))) {
        progname = argv[0];
    } else {
        ++progname;
    }
    for (;;) {
        switch (getopt(argc, argv, "f:")) {
        case -1:
            break;

        case 'f':
            f_opt = optarg;
            continue;

        default:
            (void)fprintf(stderr, usage, progname);
            exit(2);
        }
        break;
    }
    argc -= optind;
    argv += optind;
    if (argc != 2) {
        (void)fprintf(stderr, usage, progname);
        exit(2);
    }
    vdp = vnadata_alloc();
    if ((vfp = vnafile_load(vfp, argv[0], VNAFILE_AUTO,
		    errfn, NULL, vdp)) == NULL) {
        exit(3);
    }
    /* Let vnafile_save determine the file type from the output filename. */
    vnafile_set_file_type(vfp, VNAFILE_AUTO);
    if (f_opt != NULL) {
        if (vnafile_set_format(vfp, f_opt) == -1) {
            exit(4);
        }
    }
    if (vnafile_save(vfp, argv[1], vdp) == -1) {
        exit(5);
    }
    vnadata_free(vdp);
    vnafile_free(vfp);
    exit(0);
}
.ft R
.fi
.\"
.SH "SEE ALSO"
.BR vnacal "(3), " vnacal_new "(3), " vnaconv "(3), " vnadata "(3),"
.BR vnaerr "(3), " vnacal_parameter "(3)"
