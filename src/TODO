- Merge the vnafile_t structure into vnadata_t.

    - Eliminate vnadata_check_save and do the checks instead in
      vnadata_set_format and vnadata_set_filetype.  If the data type or
      dimensions are changed, can simply clear out the format information.
      Alternatively, can check if the new type is compatible with the
      format, but if not, it may create a situation the user can't get
      out of.. can't change the format due to type/dim; can't change
      type/dim because of the type.

    - Initialize the format information to NULL and deal with the
      default Sri format in save.


- Document vnacal_new_set_m_error.  First, do more evaluation
  on whether or not weighting the equations improves accuracy.

- Add functions to set the error threshold and to retrieve errors.
    int vnacal_new_get_error_vector(vnp, double *)
    int vnacal_new_set_error_limit(vnp, double limit) - scalar

  Normalize the errors to 1 standard deviation.

- Add vnacal-T16-example.c using T-MM-SS-SM-MS standards.
  Approach: generally follow the example of vnacal-TSD-example, but
  in the simulated VNA, use the M = (Ts S + Ti) (Tx S + Tm)^-1 matrix
  equation to generate the measured value, taking into account all four
  T error matrices.  Note that test-vnacal-Silvonen16 also tests this
  case and can serve somewhat as an example.

- Add Van Hamme example following as closely as possible the example
  given in the paper.

- Add debian package support

- Add example for TRM / LRM
    through, unknown equal reflect, match

- Add example for TXYZ / LXYZ
    through, 3 known reflects

- Add example for LRRM
    known line, 2 unknown equal reflects, match

- Add example for UXYZ
    unknown line with S12=S21
    3 known reflects

- Make tests that invoke each of the examples.  Create expected output
  files and compare that values are approximately equal.

- Add a test suite for vnadata

- Add a test suite for vnafile

- Add U-parameter (inverse T) support to vnaconv, vnadata and vnafile.

- Bring back vnacal_apply_t from the git history (consider renaming to
  vnacal_map_t to better match what it does and avoid confusion with the
  vancal_apply functions).  But first, explore if we can make it work
  with other than perfect match standards on the unconnected DUT ports.
  Note that even if we know these standards exactly, if the reflections
  aren't exactly zero, the system can't be solved with a linear system
  of equations because it involes products of s-parameters.  Ideally,
  we'd want to also be able to use unknown parameters and have the
  library solve for the unknowns.

  From an interface perspective, a clean approach would be to let
  positive numbers in the DUT->VNA port map to be VNA port numbers and
  zero or negative numbers represent parameters, using the negative of
  the parameter handle.

- Before the 1.0 release, lower-case "VNACAL" in the vnacal save file
  and reset the version number to 1.0.  The vnacal_load function can
  still recognize capital VNACAL versions for compatibility.
