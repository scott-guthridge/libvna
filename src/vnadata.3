.\"
.\" Vector Network Analyzer Library
.\" Copyright Â© 2020-2023 D Scott Guthridge <scott_guthridge@rompromity.net>
.\"
.\" This program is free software: you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published
.\" by the Free Software Foundation, either version 3 of the License, or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\" General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program.  If not, see <http://www.gnu.org/licenses/>.
.\"
.TH VNADATA 3 "2022-03-03" GNU
.nh
.SH NAME
vnadata_alloc, vnadata_init, vnadata_alloc_and_init, vnadata_resize, vnadata_get_type, vnadata_get_type_name, vnadata_set_type, vnadata_get_rows, vnadata_get_columns, vnadata_get_frequencies, vnadata_free, vnadata_get_fmin, vnadata_get_fmax, vnadata_get_frequency, vnadata_set_frequency, vnadata_get_frequency_vector, vnadata_set_frequency_vector, vnadata_add_frequency, vnadata_get_cell, vnadata_set_cell, vnadata_get_matrix, vnadata_set_matrix, vnadata_get_to_vector, vnadata_set_from_vector, vnadata_get_z0, vnadata_set_z0, vnadata_get_z0_vector, vnadata_set_z0_vector, vnadata_set_all_z0, vnadata_has_fz0, vnadata_get_fz0, vnadata_set_fz0, vnadata_get_fz0_vector, vnadata_set_fz0_vector, vnadata_convert, vnadata_load, vnadata_fload, vnadata_save, vnadata_fsave, vnadata_cksave, vnadata_get_filetype, vnadata_set_filetype, vnadata_get_format, vnadata_set_format, vnadata_get_fprecision, vnadata_set_fprecision, vnadata_get_dprecision, vnadata_set_dprecision \- Network Parameter Data
.\"
.SH SYNOPSIS
.B #include <vnadata.h>
.\"
.PP
Link with \fI-lvna\fP \fI-lm\fP.
.\" --------------------------------------------------------------------------
.SS "Allocation and Initialization"
.PP
.BI "vnadata_t *vnadata_alloc(vnaerr_error_fn_t *" error_fn ", void *" error_arg );
.\"
.PP
.BI "int vnadata_init(vnadata_t *" vdp ", vnadata_parameter_type_t " type ,
.in +4n
.BI "int " rows ", int " columns ", int " frequencies );
.in -4n
.\"
.PP
.ie n \{\
.BI "vnadata_t *vnadata_alloc_and_init(vnaerr_error_fn_t *" error_fn ,
.in +4n
.BI "void *" error_arg ", vnadata_parameter_type_t " type ,
.br
.BI "int " rows ", int " columns ", int " frequencies );
.in -4n
.\}
.el \{\
.BI "vnadata_t *vnadata_alloc_and_init(vnaerr_error_fn_t *" error_fn ,
.BI "void *" error_arg ,
.in +4n
.BI "vnadata_parameter_type_t " type ,
.BI "int " rows ", int " columns ", int " frequencies );
.in -4n
.\}
.\"
.PP
.BI "int vnadata_resize(vnadata_t *" vdp ", vnadata_parameter_type_t " type ,
.in +4n
.BI "int " rows ", int " columns ", int " frequencies );
.in -4n
.\"
.PP
.BI "vnadata_parameter_type_t vnadata_get_type(const vnadata_t *" vdp );
.\"
.PP
.BI "const char *vnadata_get_type_name(vnadata_parameter_type_t " type );
.\"
.PP
.BI "int vnadata_set_type(const vnadata_t *" vdp ,
.if n .in +4n
.BI "vnadata_parameter_type_t " type );
.if n .in -4n
.\"
.PP
.BI "int vnadata_get_rows(const vnadata_t *" vdp );
.\"
.PP
.BI "int vnadata_get_columns(const vnadata_t *" vdp );
.\"
.PP
.BI "int vnadata_get_frequencies(const vnadata_t *" vdp );
.\"
.PP
.BI "void vnadata_free(vnadata_t *" vdp );
.\" --------------------------------------------------------------------------
.SS "The Frequency Vector"
.PP
.BI "double vnadata_get_fmin(const vnadata_t *" vdp );
.\"
.PP
.BI "double vnadata_get_fmax(const vnadata_t *" vdp );
.\"
.PP
.BI "double vnadata_get_frequency(const vnadata_t *" vdp ", int " findex );
.\"
.PP
.BI "int vnadata_set_frequency(vnadata_t *" vdp ", int " findex ,
.if n .in +4n
.BI "double " frequency );
.if n .in -4n
.\"
.PP
.BI "const double *vnadata_get_frequency_vector(const vnadata_t *" vdp );
.\"
.PP
.BI "int vnadata_set_frequency_vector(vnadata_t *" vdp ,
.if n .in +4n
.BI "const double *" frequency_vector );
.if n .in -4n
.\"
.PP
.BI "int vnadata_add_frequency(vnadata_t *" vdp ", double " frequency );
.\" --------------------------------------------------------------------------
.SS "Data Elements"
.PP
.BI "double complex vnadata_get_cell(vnadata_t *" vdp ", int " findex ,
.if n .in +4n
.BI "int " row ", int " column );
.if n .in -4n
.\"
.PP
.BI "int vnadata_set_cell(vnadata_t *" vdp ", int " findex ", int " row ,
.if n .in +4n
.BI "int " column ", double complex " value );
.if n .in -4n
.\"
.PP
.BI "double complex *vnadata_get_matrix(const vnadata_t *" vdp ,
.if n .in +4n
.BI "int " findex );
.if .in -4n
.\"
.PP
.BI "int vnadata_set_matrix(vnadata_t *" vdp ", int " findex ,
.if n .in +4n
.BI "const double complex *" matrix );
.if n .in -4n
.\"
.PP
.BI "int vnadata_get_to_vector(const vnadata_t *" vdp ", int " row ,
.BI "int " column ,
.if n .in +4n
.BI "double complex *" vector );
.if n .in -4n
.\"
.PP
.BI "int vnadata_set_from_vector(vnadata_t *" vdp ", int " row ,
.BI "int " column ,
.if n .in +4n
.BI "const double complex *" vector );
.if n .in -4n
.\" --------------------------------------------------------------------------
.SS "Ordinary System Impedances"
.PP
.BI "double complex vnadata_get_z0(const vnadata_t *" vdp ", int " port );
.\"
.PP
.BI "int vnadata_set_z0(vnadata_t *" vdp ", int " port ", double complex " z0 );
.\"
.PP
.BI "const double complex *vnadata_get_z0_vector(const vnadata_t *" vdp );
.\"
.PP
.BI "int vnadata_set_z0_vector(vnadata_t *" vdp ,
.if n .in +4n
.BI "const double complex *" z0_vector );
.if n .in -4n
.\"
.PP
.BI "int vnadata_set_all_z0(vnadata_t *" vdp ", double complex " z0 );
.\"
.\" --------------------------------------------------------------------------
.SS "Frequency-Dependent System Impedances"
.PP
.BI "bool vnadata_has_fz0(const vnadata_t *" vdp );
.PP
.BI "double complex vnadata_get_fz0(const vnadata_t *" vdp ", int " findex ,
.if n .in +4n
.BI "int " port );
.if n .in -4n
.\"
.PP
.BI "int vnadata_set_fz0(vnadata_t *" vdp ", int " findex ", int " port ,
.if n .in +4n
.BI "double complex " z0 );
.if n .in -4n
.\"
.PP
.BI "const double complex *vnadata_get_fz0_vector(const vnadata_t *" vdp ,
.if n .in +4n
.BI "int " findex );
.if n .in -4n
.\"
.PP
.BI "int vnadata_set_fz0_vector(vnadata_t *" vdp ", int " findex ,
.if n .in +4n
.BI "const double complex *" z0_vector );
.if n .in -4n
.\" --------------------------------------------------------------------------
.SS "Parameter Conversion"
.PP
.BI "int vnadata_convert(const vnadata_t *" vdp_in ", vnadata_t *" vdp_out ,
.in +4n
.BI "vnadata_parameter_type_t " new_type );
.in -4n
.\" --------------------------------------------------------------------------
.SS "Load and Save"
.PP
.BI "int vnadata_load(vnadata_t *" vdp ", const char *" filename );
.\"
.PP
.BI "int vnadata_fload(vnadata_t *" vdp ", FILE *" fp ", const char *" filename );
.\"
.PP
.BI "int vnadata_save(vnadata_t *" vdp ", const char *" filename );
.\"
.PP
.BI "int vnadata_fsave(vnadata_t *" vdp ", FILE *" fp ,
.BI "const char *" filename );
.\"
.PP
.BI "int vnadata_cksave(vnadata_t *" vdp ", const char *" filename );
.\"
.PP
.BI "vnadata_filetype_t vnadata_get_filetype(const vnadata_t *" vdp );
.\"
.PP
.BI "int vnadata_set_filetype(vnadata_t *" vdp ", vnadata_filetype_t " type );
.\"
.PP
.BI "const char *vnadata_get_format(const vnadata_t *" vdp );
.\"
.PP
.BI "int vnadata_set_format(vnadata_t *" vdp ", const char *" format );
.\"
.PP
.BI "int vnadata_get_fprecision(const vnadata_t *" vdp );
.\"
.PP
.BI "int vnadata_set_fprecision(const vnadata_t *" vdp ", int " fprecision );
.\"
.PP
.BI "int vnadata_get_dprecision(const vnadata_t *" vdp );
.\"
.PP
.BI "int vnadata_set_dprecision(const vnadata_t *" vdp ", int " dprecision );
.\"
.SH DESCRIPTION
These functions store and manage electrical network parameter data.
Internally, the data are stored as a vector of matrices, one per frequency.
The matrix may contain any of s (scattering), t (scattering transfer),
u (inverse scattering transfer) z (impedance), y (admittance), h (hybrid),
g (inverse-hybrid), a (ABCD), b (inverse ABCD) or zin (input impedance)
parameters.
.\" --------------------------------------------------------------------------
.SS "Allocation and Initialization"
.PP
The \fBvnadata_alloc\fP() function allocates an empty \fBvnadata_t\fP
structure of parameter type VPT_UNDEF.
This is useful for creating the empty output container for other functions
such as \fBvnadata_convert\fP(), or \fBvnacal_apply\fP(3).
.\"
.PP
The \fBvnadata_init\fP() function sets the dimensions and parameter
type of the \fBvnadata_t\fP structure, initializes all frequency and
data cells to zero, and initializes all z0 entries to the default of
50 ohms.
The \fItype\fP argument must be one of: VPT_UNDEF, VPT_S, VPT_T, VPT_U,
VPT_Z, VPT_Y, VPT_H, VPT_G, VPT_A, VPT_B, or VPT_ZIN, and the dimensions
must be consistent with the parameter type.
.\"
.PP
The \fBvnadata_alloc_and_init\fP() function is a combination
of \fBvnadata_alloc\fP() and \fBvnadata_init\fP().
.\"
.PP
The \fBvnadata_resize\fP() function changes the parameter type and
dimensions of the matrix without clearing or converting data.
Existing values remain undisturbed when the matrix type, the number
of rows, or the number of frequencies are changed, but shift to other
cells when the number of columns is changed, as \fBvnadata_resize\fP()
doesn't reform the matrix.
Changing the parameter type with this function doesn't convert existing
data to the new type.  For type conversion, see \fBvnadata_convert\fP().
.\"
.PP
The \fBvnadata_get_type\fP() function returns the current parameter type
of the matrix; \fBvnadata_get_typename\fP() returns \fItype\fP as a string.
The \fBvnadata_set_type\fP() function changes the parameter type without
converting existing data.
The \fItype\fP parameter must be consistent with the matrix dimensions.
.\"
.PP
The \fBvnadata_get_rows\fP(), \fBvnadata_get_columns\fP(), and
\fBvnadata_get_frequencies\fP() functions return the current dimensions
of the matrix.
.\"
.PP
The \fBvnadata_free\fP() function frees the structure and its contents.
.\" --------------------------------------------------------------------------
.SS "The Frequency Vector"
.PP
The \fBvnadata_get_fmin\fP() and \fBvnadata_get_fmax\fP() functions
return the lowest and highest frequencies, respectively.
.PP
The \fBvnadata_get_frequency\fP() and \fBvnadata_set_frequency\fP()
functions, respectively, get and set the frequency at index \fIfindex\fP.
.\"
.PP
The \fBvnadata_get_frequency_vector\fP() and
\fBvnadata_set_frequency_vector\fP() functions get and set the entire
frequency vector.
The length of \fIfrequency_vector\fP must match \fIfrequencies\fP.
.PP
The \fBvnadata_add_frequency\fP() function adds a new frequency entry
at the end, filling the associated new data elements with initial values.
This function is useful, for example, when parsing a Touchstone V1 file,
where you don't know the number of frequencies up-front.
.\" --------------------------------------------------------------------------
.SS "Data Elements"
.PP
The \fBvnadata_get_cell\fP() and \fBvnadata_set_cell\fP() functions
get and set indivdual data elements.
The \fBvnadata_get_matrix\fP() and \fBvnadata_set_matrix\fP() functions
get and set the parameter data matrix for the given frequency.
The \fImatrix\fP parameter is a pointer to a vector of double complex
containing the flattened matrix elements in row-major order.
.PP
The \fBvnadata_set_from_vector\fP() and \fBvnadata_get_to_vector\fP()
functions copy a vector of data values, one entry per frequency, into
a \fBvnadata_t\fP matrix cell, and vice versa.
The \fIvector\fP argument must point to a vector with length at least
the number of frequencies in the \fBvnadata_t\fP structure.
These functions are useful for translating between the matrix of vectors
form used for VNA measurements, and the vector of matrices form used
internally by vnadata.
.\" --------------------------------------------------------------------------
.SS "Ordinary System Impedances"
.PP
The \fBvnadata_get_z0\fP() and \fBvnadata_set_z0\fP() functions get and
set the system impedance for the given \fIport\fP.
The \fBvnadata_get_z0_vector\fP() and \fBvnadata_set_z0_vector\fP()
functions get and set system impedances for all ports, where the length
of \fIz0_vector\fP is the maximum of \fIrows\fP and \fIcolumns\fP.
The \fBvnadata_set_all_z0\fP() function sets the system impedances of
all ports to the same value, \fIz0\fP.
If not set, all system impedances default to 50 ohms.
.PP
Calling \fBvnadata_set_z0\fP(), \fBvnadata_set_z0_vector\fP(), or
\fBvnadata_set_all_z0\fP() when frequency-dependent impedances are in-use
(see below) discards all frequency-dependent z0 values and returns to
ordinary system impedances with all other impedance values initialized
to 50 ohms.
If frequency-dependent impedances are in-use, \fBvnadata_get_z0\fP()
and \fBvnadata_get_z0_vector\fP() return failure.
.\" --------------------------------------------------------------------------
.SS "Frequency-Dependent System Impedances"
.PP
The \fBvnadata_get_fz0\fP() and \fBvnadata_set_fz0\fP() functions
get and set the system impedance for the given port on a per-frequency
basis.
The \fBvnadata_get_fz0_vector\fP() and \fBvnadata_set_fz0_vector\fP()
functions get and set the system impedances for all ports at a given
frequency index, where the length of \fIz0_vector\fP is the maximum of
\fIrows\fP and \fIcolumns\fP.
.PP
The \fBvnadata_has_fz0\fP() function tests if per-frequency system
impedances are in effect and returns true if they are.
If frequency-dependent impedances are not in-use, the
\fBvnadata_set_fz0\fP() and \fBvnadata_set_fz0_vector\fP() functions
establish frequency-dependent system impedances, preserving the ordinary
system impedances for all other entries.
\fBvnadata_get_fz0\fP() and \fBvnadata_get_fz0_vector\fP() functions
work regardless of whether frequency-dependent system impedances are
in-effect; in the later case, they don't use the \fIfindex\fP argument.
.\"
.\" --------------------------------------------------------------------------
.SS "Parameter Conversion"
.PP
The \fBvnadata_convert\fP() function converts from one parameter type
to another, writing the result into \fIvdp_out\fP.
If \fIvdp_out\fP refers to the same structure as \fIvdp_in\fP, then an
in-place conversion is done.
If \fIvdp_out\fP is not the same as \fIvdp_in\fP and \fInew_parameter\fP
is the same type as the input matrix, the data are simply copied.
\fBvnadata_convert\fP() supports all 72 parameter conversions plus 9
conversions from parameter data to input impedances at each port.
.\" --------------------------------------------------------------------------
.SS "Load and Save"
.PP
The \fBvnadata_load\fP() function loads network parameter data from
\fIfilename\fP into the \fBvnadata_t\fP structure, changing the type,
dimensions, frequency vector and z0 values of the structure to match
the data.
If \fIfilename\fP ends with \.ts, \.s1p, \.s2p, \.s3p or \.s4p, then
\fBvnadata_load\fP() loads Touchstone format with version determined
from the contents of the file.
If \fIfilename\fP ends in \.npd, then \fBvnadata_load\fP() loads NPD format.
If the type cannot be determined from \fIfilename\fP, and the
\fBvnadata_t\fP structure already has a filetype set through
\fBvnadata_set_filetype\fP() or a previous load, it uses the existing
file type.
If \fBvnadata_load\fP() cannot determine the file type from \fIfilename\fP
or from the \fBvnadata_t\fP structure, it defaults to NPD format.
.\"
.PP
The \fBvnadata_fload\fP() function does the same as \fBvnadata_load\fP()
except that it reads from the already open file pointer \fIfp\fP.
The \fIfilename\fP argument to \fBvnadata_fload\fP() is used only in
error messages, and for determining the file type \- it doesn't have to
refer to an actual file.
.\"
.PP
The \fBvnadata_save\fP() and \fBvnadata_fsave\fP() functions save
the contents of the \fBvnadata_t\fP structure to \fIfilename\fP or
to the file pointer, \fIfp\fP, respectively using the format set by
\fBvnadata_set_format\fP().
The file type is determined as in \fBvnadata_load\fP() with the nuance
that Touchstone 1 format can be saved to a file ending in .ts.
.\"
.PP
\fBvnadata_cksave\fP() checks if we'd be able to save using the
current filetype, format and parameter type, without actually doing
a save.
This function is useful to validate that it will be possible to save
with the current save options before doing expensive steps such as
measuring data from a device, only to ultimately fail with an error
in \fBvnadata_save\fP().
.\"
.PP
.PP
The \fBvnadata_get_file_type\fP() and \fBvnadata_set_file_type\fP()
functions get and set the current file type described by the following
enumeration:
.sp
.in +4n
.nf
.ft CW
typedef enum vnadata_filetype {
    VNADATA_FILETYPE_AUTO,
    VNADATA_FILETYPE_NPD,
    VNADATA_FILETYPE_TOUCHSTONE1,
    VNADATA_FILETYPE_TOUCHSTONE2
} vnadata_filetype_t;
.ft R
.fi
.in -4n
.sp
The default is \s-2VNAFILE_AUTO\s+2 which causes the load and save
functions to try to determine the file type based on the filename
extension.
If the file ends with \.s<digit>p, the library assumes Touchstone 1
format; if it ends in \.ts, the library assumes Touchstone 2 format;
if it ends in \.npd, the library assumes network parameter data format.
When loading Touchstone files, the parser automatically determines the
Touchstone version from the contents of the file.
.PP
The \fBvnadata_get_format\fP() and \fBvnadata_set_format\fP() functions
get and set the parameter type and units as they appear in the file.
The \fIformat\fP parameter is a comma-separated case-insensitive list
of the following specifiers:
.sp
.in +4n
.TS
l l.
S[ri|ma|dB]	scattering parameters
T[ri|ma|dB]	scattering-transfer parameters
U[ri|ma|dB]	inverse scattering-transfer parameters
Z[ri|ma]	impedance parameters
Y[ri|ma]	admittance parameters
H[ri|ma]	hybrid parameters
G[ri|ma]	inverse-hybrid parameters
A[ri|ma]	ABCD parameters
B[ri|ma]	inverse ABCD parameters
Zin[ri|ma]	impedance looking into each port
PRC	Zin as parallel resistance and capacitance
PRL	Zin as parallel resistance and inductance
SRC	Zin as series resistance and capacitance
SRL	Zin as series resistance and inducatance
IL	insertion loss (dB)
RL	return loss (dB)
VSWR	voltage standing wave ratio
.TE
.in -4n
.sp
where the ri, ma or dB suffix is an optional coordinate system modifier:
.in +4n
.TS
l l.
ri	real, imaginary
ma	magnitude, angle
dB	decibels, angle
.TE
.in -4n
.sp
In the Touchstone file formats, only one specifier may be given and it
must be restricted to one of the s, z, y, h or g variants.
.\"
.PP
The pointer returned by \fBvnadata_get_format\fP() becomes invalid
after a call to \fBvnadata_load\fP(), \fBvnadata_fload\fP() or
\fBvnadata_set_format\fP().
.\"
.PP
If \fBvnadata_set_format\fP() isn't called, \fBvnadata_save\fP() and
\fBvnadata_fsave\fP() take the parameter type from the \fBvnadata_t\fP
structure and use default coordinates \(lqri\(rq.
.\"
.PP
The \fBvnadata_get_fprecision\fP(), \fBvnadata_set_fprecision\fP(),
\fBvnadata_get_dprecision\fP(), and \fBvnadata_set_dprecision\fP()
functions get and set the numeric precision in decimal digits for
frequency and data values, respectively, when saving to a file.
If not set, \fIfprecision\fP defaults to 7 digits and \fIdprecision\fP
defaults to 6 digits.
.\"
.SH "RETURN VALUE"
On success, the allocate functions return a pointer to a \fBvnadata_t\fP
structure; the get functions return the requested value, and other
integer valued functions return zero.
On error, the integer valued functions return -1; the pointer valued
functions return NULL; and the double and double complex functions
return HUGE_VAL.
.\"
.SH ERRORS
See \fBvnaerr\fP(3).
.\"
.SH EXAMPLES
.nf
.ft CW
#include <complex.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <vnadata.h>

#define PI      3.14159265
#define FMIN    100e+3          /* Hz */
#define FMAX    1e+9            /* Hz */
#define N       9               /* number of frequencies */
#define L       796e-9          /* Henries */
#define C       318e-12         /* Farads */

/*
 * error_fn: error printing function for the library
 *   @message: single line error message without a newline
 *   @error_arg: passed through to the error function (unused here)
 *   @category: category of error (ignored here)
 */
static void error_fn(const char *message, void *error_arg,
        vnaerr_category_t category)
{
    (void)fprintf(stderr, "example: %s\\n", message);
}

/*
 * main
 */
int main(int argc, char **argv)
{
    vnadata_t *vdp;
    const double fstep = log(FMAX / FMIN) / (double)(N - 1);

    /*
     * Set up Z-parameter matrix for an L-C divider.
     */
    if ((vdp = vnadata_alloc_and_init(error_fn, /*error_arg*/NULL,
                    VPT_Z, 2, 2, N)) == NULL) {
        exit(1);
    }
    for (int findex = 0; findex < N; ++findex) {
        double f = FMIN * exp((double)findex * fstep);
        double complex s = 2 * PI * I * f;
        double complex z[2][2];

        if (vnadata_set_frequency(vdp, findex, f) == -1) {
            exit(2);
        }
        z[0][0] = 1.0 / (C * s) + L * s;
        z[0][1] = 1.0 / (C * s);
        z[1][0] = z[0][1];
        z[1][1] = z[0][1];
        if (vnadata_set_matrix(vdp, findex, &z[0][0]) == -1) {
            exit(3);
        }
    }

    /*
     * Save the parameters in Z real-imaginary, S dB, and Zin
     * magnitude-angle formats.
     */
    if (vnadata_set_format(vdp, "Zri,SdB,Zinma") == -1) {
        exit(4);
    }
    if (vnadata_save(vdp, "vnadata-example.npd") == -1) {
        exit(5);
    }

    /*
     * Print the Z parameters.
     */
    (void)printf("z-parameters (real-imaginary)\\n");
    (void)printf("-------------------------\\n");
    for (int findex = 0; findex < N; ++findex) {
        double f = vnadata_get_frequency(vdp, findex);

        (void)printf("f %7.2f MHz\\n", f / 1.0e+6);
        for (int row = 0; row < 2; ++row) {
            for (int column = 0; column < 2; ++column) {
                double complex value;

                value = vnadata_get_cell(vdp, findex, row, column);
                (void)printf("  %6.1f %6.1f%s",
                        creal(value), cimag(value),
                        column < 1 ? "," : "");
            }
            (void)printf("\\n");
        }
        (void)printf("\\n");
    }
    (void)printf("\\n");


    /*
     * Convert to S-parameters and print.
     */
    if (vnadata_convert(vdp, vdp, VPT_S) == -1) {
        exit(6);
    }
    (void)printf("s-parameters (dB-degrees)\\n");
    (void)printf("-------------------------\\n");
    for (int findex = 0; findex < N; ++findex) {
        double f = vnadata_get_frequency(vdp, findex);

        (void)printf("f %7.2f MHz\\n", f / 1.0e+6);
        for (int row = 0; row < 2; ++row) {
            for (int column = 0; column < 2; ++column) {
                double complex value;

                value = vnadata_get_cell(vdp, findex, row, column);
                (void)printf("  %5.1f %6.1f%s",
                        20 * log10(cabs(value)), 180 / PI * carg(value),
                        column < 1 ? "," : "");
            }
            (void)printf("\\n");
        }
        (void)printf("\\n");
    }
    (void)printf("\\n");

    /*
     * Convert to impedance into each port and print.
     */
    if (vnadata_convert(vdp, vdp, VPT_ZIN) == -1) {
        exit(7);
    }
    (void)printf("input-impedances (ohms-degrees)\\n");
    (void)printf("------------------------------\\n");
    for (int findex = 0; findex < N; ++findex) {
        double f = vnadata_get_frequency(vdp, findex);

        (void)printf("f %7.2f MHz\\n", f / 1.0e+6);
        for (int port = 0; port < 2; ++port) {
            double complex value;

            value = vnadata_get_cell(vdp, findex, 0, port);
            (void)printf("  %9.2f %6.1f%s",
                    cabs(value), 180 / PI * carg(value),
                    port < 1 ? "," : "");
        }
        (void)printf("\\n");
    }
    (void)printf("\\n");
    exit(0);
}
.ft R
.fi
.\"
.SH "SEE ALSO"
.BR vnacal "(3), " vnacal_new "(3), " vnaconv "(3), " vnaerr "(3),"
.BR vnacal_parameter "(3)"
